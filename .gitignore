-- Load Impact UI
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/NeverJar/ImpactUI/main/ImpactUI.lua"))()
local Window = Library:Create("Hub Name", "Game Name")

-- Main Tab: Hitbox Expander
local MainTab = Window:Tab("Main", true)
MainTab:Label("Hitbox Expander")

local hitboxEnabled = false
local hitboxSize = 20
local hitboxTransparency = 0.5
local hitboxNoCollision = false

local function applyHitboxSettings()
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = player.Character.HumanoidRootPart
            if hitboxEnabled then
                hrp.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
                hrp.Transparency = hitboxTransparency
                hrp.CanCollide = not hitboxNoCollision
            else
                hrp.Size = Vector3.new(2, 2, 1)
                hrp.Transparency = 1
                hrp.CanCollide = true
            end
        end
    end
end

MainTab:Toggle("Enable Hitbox Expander", function(state)
    hitboxEnabled = state
    applyHitboxSettings()
end)

MainTab:Slider("Hitbox Size (SOME GAMES)", 1, 50, hitboxSize, function(value)
    hitboxSize = value
    if hitboxEnabled then applyHitboxSettings() end
end)

MainTab:Toggle("No Collision", function(state)
    hitboxNoCollision = state
    if hitboxEnabled then applyHitboxSettings() end
end)

MainTab:Slider("Hitbox Transparency", 0, 1, hitboxTransparency, function(value)
    hitboxTransparency = value
    if hitboxEnabled then applyHitboxSettings() end
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if hitboxEnabled then applyHitboxSettings() end
end)

-- Aimlock Tab
local AimlockTab = Window:Tab("Aimlock", true)
AimlockTab:Label("Aimlock (Camlock)")

local aimlockEnabled = false
local isLocked = false
local lockedTarget = nil
local camera = workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local function getClosestPlayerToCursor()
    local closestPlayer = nil
    local shortestDistance = math.huge
    local mouseLocation = UserInputService:GetMouseLocation()

    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = player.Character.HumanoidRootPart
            local screenPos, onScreen = camera:WorldToViewportPoint(hrp.Position)
            if onScreen then
                local dist = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(mouseLocation.X, mouseLocation.Y)).Magnitude
                if dist < shortestDistance then
                    shortestDistance = dist
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

AimlockTab:Toggle("Enable Aimlock", function(state)
    aimlockEnabled = state
    if not aimlockEnabled then
        isLocked = false
        lockedTarget = nil
    end
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not aimlockEnabled or gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.Q then
        if isLocked then
            isLocked = false
            lockedTarget = nil
        else
            local target = getClosestPlayerToCursor()
            if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
                lockedTarget = target
                isLocked = true
            end
        end
    end
end)

RunService.RenderStepped:Connect(function()
    if isLocked and lockedTarget and lockedTarget.Character and lockedTarget.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = lockedTarget.Character.HumanoidRootPart
        local camPos = camera.CFrame.Position
        local targetPos = hrp.Position

        local direction = (targetPos - camPos).Unit
        local newCFrame = CFrame.new(camPos, camPos + direction)
        camera.CFrame = newCFrame
    end
end)

-- Target Tab
local TargetTab = Window:Tab("Target", true)
TargetTab:Label("Targeting")

local selectedTarget = nil

-- Partial match by display name or username
local function findClosestMatch(input)
    input = input:lower()
    local bestMatch = nil
    local bestDistance = math.huge

    for _, player in pairs(game.Players:GetPlayers()) do
        local name = player.DisplayName:lower()
        local username = player.Name:lower()

        if name:sub(1, #input) == input or username:sub(1, #input) == input then
            local dist = math.abs(#name - #input)  -- prefer closest length
            if dist < bestDistance then
                bestDistance = dist
                bestMatch = player
            end
        end
    end

    return bestMatch
end

TargetTab:Textbox("Display Name", "Enter Display Name", function(txt)
    if #txt > 0 then
        local player = findClosestMatch(txt)
        if player then
            selectedTarget = player
            print("Target set to:", player.Name)
        else
            selectedTarget = nil
            print("No matching player found.")
        end
    else
        selectedTarget = nil
    end
end)

local isSpectating = false
local cam = workspace.CurrentCamera

TargetTab:Toggle("Spectate Target", function(state)
    isSpectating = state
    if isSpectating and selectedTarget and selectedTarget.Character then
        cam.CameraSubject = selectedTarget.Character:FindFirstChild("Humanoid")
    else
        cam.CameraSubject = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") or nil
    end
end)

TargetTab:Button("Teleport to Target", function()
    if selectedTarget and selectedTarget.Character and selectedTarget.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = selectedTarget.Character.HumanoidRootPart
        local offset = hrp.CFrame.LookVector * -3 -- 3 studs behind target
        local targetPosition = hrp.Position + offset
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
    else
        print("Target not valid.")
    end
end)

-- Misc Tab
local MiscTab = Window:Tab("Misc", true)
MiscTab:Label("Miscellaneous")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local Noclipping = false
local InfiniteJumpEnabled = false
local GodModeEnabled = false

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")

-- Godmode: constantly set health to max
MiscTab:Toggle("Universal Godmode", function(state)
    GodModeEnabled = state
    if GodModeEnabled then
        spawn(function()
            while GodModeEnabled do
                if Humanoid and Humanoid.Health < Humanoid.MaxHealth then
                    Humanoid.Health = Humanoid.MaxHealth
                end
                wait(0.1)
            end
        end)
    end
end)

-- Infinite Jump
MiscTab:Toggle("Universal Infinite Jump", function(state)
    InfiniteJumpEnabled = state
end)

UserInputService.JumpRequest:Connect(function()
    if InfiniteJumpEnabled and Humanoid then
        Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

-- NoClip
MiscTab:Toggle("Universal NoClip", function(state)
    Noclipping = state
end)

RunService.Stepped:Connect(function()
    if Noclipping then
        local char = LocalPlayer.Character
        if char then
            for _, part in pairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end
    end
end)

LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    Humanoid = char:WaitForChild("Humanoid")
end)
