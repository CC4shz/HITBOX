-- Official Rayfield Initialization
local Rayfield = loadstring(game:HttpGet("https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/refs/heads/main/source.lua"))()

local Window = Rayfield:CreateWindow({
    Name = "Criminality Hub",
    LoadingTitle = "Criminality Hub",
    LoadingSubtitle = "by YourNameHere",
    ConfigurationSaving = {
        Enabled = false,
        FolderName = nil,
        FileName = "CriminalityConfig"
    },
    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = false
    },
    KeySystem = false
})

-- Hitbox Logic
local hitboxEnabled = false
local hitboxSize = 10
local hitboxCollidable = false
local hitboxConnection

local MainTab = Window:CreateTab("Main", 4483362458)

MainTab:CreateToggle({
    Name = "Hitbox Expander",
    CurrentValue = false,
    Callback = function(state)
        hitboxEnabled = state
        if state then
            hitboxConnection = game:GetService("RunService").RenderStepped:Connect(function()
                for _, player in ipairs(game.Players:GetPlayers()) do
                    if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local part = player.Character.HumanoidRootPart
                        part.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
                        part.Transparency = 0.5
                        part.Material = Enum.Material.Neon
                        part.CanCollide = hitboxCollidable
                    end
                end
            end)
        else
            if hitboxConnection then
                hitboxConnection:Disconnect()
                hitboxConnection = nil
            end
            for _, player in ipairs(game.Players:GetPlayers()) do
                if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local part = player.Character.HumanoidRootPart
                    part.Size = Vector3.new(2, 2, 1)
                    part.Transparency = 0
                    part.Material = Enum.Material.Plastic
                    part.CanCollide = true
                end
            end
        end
    end
})

MainTab:CreateSlider({
    Name = "Hitbox Size",
    Range = {1, 100},
    Increment = 1,
    CurrentValue = 10,
    Callback = function(value)
        hitboxSize = value
    end
})

MainTab:CreateToggle({
    Name = "Hitbox Collision",
    CurrentValue = false,
    Callback = function(state)
        hitboxCollidable = state
    end
})

-- Aimbot Logic
local AimbotTab = Window:CreateTab("Aimbot", 4483362458)

local aimbotEnabled = false
local aimbotToggleKey = Enum.KeyCode.Q
local aimbotFOV = 360
local aimbotMaxRange = 1000

local UIS = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local currentTarget = nil

local FOVCircle = Drawing.new("Circle")
FOVCircle.Color = Color3.fromRGB(255, 0, 0)
FOVCircle.Thickness = 2
FOVCircle.NumSides = 32
FOVCircle.Radius = aimbotFOV / 2
FOVCircle.Visible = false

local SnapLine = Drawing.new("Line")
SnapLine.Color = Color3.fromRGB(255, 0, 0)
SnapLine.Thickness = 2
SnapLine.Visible = false

local HeadDot = Drawing.new("Circle")
HeadDot.Color = Color3.fromRGB(255, 0, 0)
HeadDot.Thickness = 2
HeadDot.NumSides = 32
HeadDot.Radius = 5
HeadDot.Visible = false

local function updateFOVCircle()
    local size = Camera.ViewportSize
    FOVCircle.Position = Vector2.new(size.X / 2, size.Y / 2)
end

local function updateSnapLine(targetPos)
    local size = Camera.ViewportSize
    SnapLine.From = Vector2.new(size.X / 2, size.Y / 2)
    local screenPoint = Camera:WorldToViewportPoint(targetPos)
    SnapLine.To = Vector2.new(screenPoint.X, screenPoint.Y)
    SnapLine.Visible = true
end

local function updateHeadDot(targetPos)
    local screenPoint = Camera:WorldToViewportPoint(targetPos)
    HeadDot.Position = Vector2.new(screenPoint.X, screenPoint.Y)
    HeadDot.Visible = true
end

local function isValidTarget(player)
    return player
        and player.Character
        and player.Character:FindFirstChild("Head")
        and player.Character:FindFirstChild("Humanoid")
        and player.Character.Humanoid.Health > 0
end

local function getClosestPlayer()
    local closest, shortest = nil, math.huge
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and isValidTarget(player) then
            local head = player.Character.Head
            local dist = (head.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            if dist <= aimbotMaxRange then
                local screenPoint, onScreen = Camera:WorldToViewportPoint(head.Position)
                if onScreen then
                    local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                    local fromCenter = (Vector2.new(screenPoint.X, screenPoint.Y) - screenCenter).Magnitude
                    if fromCenter <= aimbotFOV / 2 and dist < shortest then
                        shortest = dist
                        closest = player
                    end
                end
            end
        end
    end
    return closest
end

AimbotTab:CreateToggle({
    Name = "Aimlock Keybind (Q)",
    CurrentValue = false,
    Callback = function(state)
        aimbotEnabled = state
        FOVCircle.Visible = aimbotEnabled
        SnapLine.Visible = false
        HeadDot.Visible = false
        currentTarget = nil
    end
})

UIS.InputBegan:Connect(function(input, gpe)
    if not gpe and input.KeyCode == aimbotToggleKey then
        aimbotEnabled = not aimbotEnabled
        FOVCircle.Visible = aimbotEnabled
        SnapLine.Visible = false
        HeadDot.Visible = false
        currentTarget = nil
    end
end)

RunService.RenderStepped:Connect(function()
    updateFOVCircle()

    if aimbotEnabled then
        if not currentTarget or not isValidTarget(currentTarget) then
            currentTarget = getClosestPlayer()
        end

        if currentTarget and isValidTarget(currentTarget) then
            local head = currentTarget.Character.Head
            updateSnapLine(head.Position)
            updateHeadDot(head.Position)
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, head.Position)
        else
            SnapLine.Visible = false
            HeadDot.Visible = false
        end
    else
        SnapLine.Visible = false
        HeadDot.Visible = false
    end
end)

-- Player Tab (only one instance, guaranteed)
local PlayerTab = Window:CreateTab("Player", 4483362458)

-- NoClip Toggle
PlayerTab:CreateToggle({
    Name = "NoClip",
    CurrentValue = false,
    Callback = function(state)
        if state then
            _G.NoclipLoop = game:GetService("RunService").Stepped:Connect(function()
                local char = game.Players.LocalPlayer.Character
                if char then
                    for _, part in ipairs(char:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            if _G.NoclipLoop then
                _G.NoclipLoop:Disconnect()
                _G.NoclipLoop = nil
            end
        end
    end
})

-- Universal God Mode
PlayerTab:CreateToggle({
    Name = "Universal God Mode",
    CurrentValue = false,
    Callback = function(state)
        local char = game.Players.LocalPlayer.Character
        local hum = char and char:FindFirstChildWhichIsA("Humanoid")
        if hum then
            if state then
                hum:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
                hum.Health = math.huge
                hum.MaxHealth = math.huge
            else
                hum:SetStateEnabled(Enum.HumanoidStateType.Dead, true)
                hum.Health = hum.MaxHealth
            end
        end
    end
})
