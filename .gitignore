local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Load the GUI library
local UI = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/UI-Libs/main/Vape.txt"))()

-- Create the main frame for the GUI
local mainFrame = UI:CreateWindow("sillyware", 500, 400)

-- Create Tabs
local mainTab = mainFrame:CreateTab("Main")
local playerTab = mainFrame:CreateTab("Player")
local miscTab = mainFrame:CreateTab("Misc")
local visualsTab = mainFrame:CreateTab("Visuals")

-- Main Tab
local hitboxToggle = mainTab:CreateToggle("Hitbox Expander", false, function(state)
    local function extendHitbox(player)
    for _, partName in ipairs(defaultBodyParts) do
        local part = player.Character and (player.Character:FindFirstChild(partName) or findClosestPart(player, partName))
        if part and part:IsA("BasePart") then
            savedPart(player, part)
            part.CanCollide = not noCollisionEnabled
            part.Transparency = hitboxTransparency / 10
            part.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
        end
    end
end

local function isEnemy(player)
    if teamCheck == "FFA" or teamCheck == "Everyone" then
        return true
    end
    local localPlayerTeam = LocalPlayer.Team
    return player.Team ~= localPlayerTeam
end

local function shouldExtendHitbox(player)
    return isEnemy(player)
end

local function updateHitboxes()
    for _, v in ipairs(Players:GetPlayers()) do
        if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
            if shouldExtendHitbox(v) then
                extendHitbox(v)
            else
                restoredPart(v)
    end
end)

local hitboxSizeSlider = mainTab:CreateSlider("Hitbox Size", 1, 100, 1, function(size)
    tab:Slider("Hitbox Size", 1, 100, 1, function(value)
    hitboxSize = value
    if hitboxEnabled then
        updateHitboxes()
    end
end)

local hitboxCollisionToggle = mainTab:CreateToggle("Hitbox Collision", true, function(state)
    noCollisionEnabled = enabled
    WarningText.Visible = enabled
    coroutine.wrap(function()
        while noCollisionEnabled do
            if hitboxEnabled then
                updateHitboxes()
            end
            task.wait(0.01)
        end
        if hitboxEnabled then
            updateHitboxes()
        end
    end)()
end)
end)

-- Player Tab
local flyToggle = playerTab:CreateToggle("C-Frame Fly", false, function(state)
    if state then
        local function enableFly()
    flying = true
    while flying do
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, flySpeed, 0)
        wait(0.1)
    end
end
    else
        local function disableFly()
    flying = false
end

    end
end)

local keybindButton = playerTab:CreateButton("Change Fly Keybind", function()
    local function setKeybind(input)
    local newKey = Enum.KeyCode[input:upper()]
    if newKey then
        userKeybind = newKey
        return "Keybind set to " .. input:upper()
    else
        return "Invalid key"
    end
end

end)

local speedSlider = playerTab:CreateSlider("Fly Speed", 1, 175, 1, function(speed)
    local function updateFlySpeed(value)
    flySpeed = value
end

end)

-- Misc Tab
local noclipToggle = miscTab:CreateToggle("Noclip", false, function(state)
    local function toggleNoclip()
    noclipEnabled = not noclipEnabled

    if noclipEnabled then
        game:GetService("RunService").Stepped:Connect(function()
            if noclipEnabled then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    end
end

end)

local infiniteJumpToggle = miscTab:CreateToggle("Infinite Jump", false, function(state)
    local function toggleInfiniteJump()
    infiniteJumpEnabled = not infiniteJumpEnabled
    if infiniteJumpEnabled then
        game:GetService("UserInputService").JumpRequest:Connect(function()
            if infiniteJumpEnabled then
                game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
    end
end

end)

-- Visuals Tab
local espButton = visualsTab:CreateButton("Toggle ESP (Names & Distance)", function()
    local function toggleESP()
    espEnabled = not espEnabled

    for _, otherPlayer in pairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player then
            local character = otherPlayer.Character
            if character then
                local head = character:FindFirstChild("Head")
                if head then
                    local billboardGui = head:FindFirstChild("ESPTag")
                    
                    if espEnabled then
                        -- Create ESP if it doesn't exist
                        if not billboardGui then
                            billboardGui = Instance.new("BillboardGui")
                            billboardGui.Name = "ESPTag"
                            billboardGui.Adornee = head
                            billboardGui.Size = UDim2.new(4, 0, 1, 0)
                            billboardGui.AlwaysOnTop = true
                            
                            local textLabel = Instance.new("TextLabel")
                            textLabel.Parent = billboardGui
                            textLabel.Size = UDim2.new(1, 0, 1, 0)
                            textLabel.BackgroundTransparency = 1
                            textLabel.Text = otherPlayer.Name
                            textLabel.TextColor3 = Color3.new(1, 1, 1) -- White text
                            textLabel.TextScaled = true
                            
                            billboardGui.Parent = head
                        end
                    else
                        -- Remove ESP if it exists
                        if billboardGui then
                            billboardGui:Destroy()
                        end
                    end
                end
            end
        end
    end
end

end)

local guiToggleButton = visualsTab:CreateButton("Change GUI Keybind", function()
    local function toggleGui()
    gui.Enabled = not gui.Enabled
end

-- Function to update keybind
local function setKeybind(input)
    local newKey = Enum.KeyCode[input:upper()]
    if newKey then
        userKeybind = newKey
        return "Keybind set to " .. input:upper()
    else
        return "Invalid key"
    end
end


end)

-- Show the GUI
mainFrame:Show()
