-- Load Mapple UI
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Mapple7777/UI-Librarys/main/UI-1/UI.lua"))()
local Window = Library:Create("Sillyware", "Universal")

-- Tabs
local MainTab = Window:Tab("Main", true)
local AimlockTab = Window:Tab("Aimlock", false)
local TargetTab = Window:Tab("Target", false)
local MiscTab = Window:Tab("Misc", false)
local SettingsTab = Window:Tab("Settings", false)

-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Character references
local function updateCharacter()
    Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    Humanoid = Character:WaitForChild("Humanoid")
end
updateCharacter()
LocalPlayer.CharacterAdded:Connect(updateCharacter)

-- MAIN TAB: Hitbox Expander
MainTab:Label("Hitbox Expander")

local hitboxEnabled = false
local hitboxSize = 5
local hitboxTransparency = 0.5
local hitboxNoCollision = false

local function applyHitboxSettings()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = player.Character.HumanoidRootPart
            if hitboxEnabled then
                hrp.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
                hrp.Transparency = hitboxTransparency
                hrp.CanCollide = not hitboxNoCollision
            else
                hrp.Size = Vector3.new(2, 2, 1)
                hrp.Transparency = 1
                hrp.CanCollide = true
            end
        end
    end
end

MainTab:Toggle("Enable Hitbox Expander", function(state)
    hitboxEnabled = state
    applyHitboxSettings()
end)

MainTab:Slider("Hitbox Size", 1, 20, function(value)
    hitboxSize = value
    if hitboxEnabled then applyHitboxSettings() end
end)

MainTab:Toggle("No Collision", function(state)
    hitboxNoCollision = state
    if hitboxEnabled then applyHitboxSettings() end
end)

MainTab:Slider("Hitbox Transparency", 0, 1, function(value)
    hitboxTransparency = value
    if hitboxEnabled then applyHitboxSettings() end
end)

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        task.wait(1)
        applyHitboxSettings()
    end)
end)

LocalPlayer.CharacterAdded:Connect(function()
    task.wait(1)
    applyHitboxSettings()
end)

-- AIMLOCK TAB
AimlockTab:Label("Aimlock (Camlock)")

local aimlockEnabled = false
local isLocked = false
local lockedTarget = nil
local camera = workspace.CurrentCamera

local function getClosestPlayerToCursor()
    local closestPlayer = nil
    local shortestDistance = math.huge
    local mouseLocation = UserInputService:GetMouseLocation()

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = player.Character.HumanoidRootPart
            local screenPos, onScreen = camera:WorldToViewportPoint(hrp.Position)
            if onScreen then
                local dist = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(mouseLocation.X, mouseLocation.Y)).Magnitude
                if dist < shortestDistance then
                    shortestDistance = dist
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

AimlockTab:Toggle("Enable Aimlock", function(state)
    aimlockEnabled = state
    if not aimlockEnabled then
        isLocked = false
        lockedTarget = nil
    end
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not aimlockEnabled or gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.Q then
        if isLocked then
            isLocked = false
            lockedTarget = nil
        else
            local target = getClosestPlayerToCursor()
            if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
                lockedTarget = target
                isLocked = true
            end
        end
    end
end)

RunService.RenderStepped:Connect(function()
    if isLocked and lockedTarget and lockedTarget.Character and lockedTarget.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = lockedTarget.Character.HumanoidRootPart
        local camPos = camera.CFrame.Position
        camera.CFrame = CFrame.new(camPos, hrp.Position)
    end
end)

-- TARGET TAB
TargetTab:Label("Targeting")

local selectedTarget = nil

local function findClosestMatch(input)
    input = input:lower()
    local bestMatch, bestDistance = nil, math.huge
    for _, player in pairs(Players:GetPlayers()) do
        local name, username = player.DisplayName:lower(), player.Name:lower()
        if name:sub(1, #input) == input or username:sub(1, #input) == input then
            local dist = math.abs(#name - #input)
            if dist < bestDistance then
                bestDistance = dist
                bestMatch = player
            end
        end
    end
    return bestMatch
end

TargetTab:Textbox("Display Name", "Enter Display Name", function(txt)
    selectedTarget = (#txt > 0) and findClosestMatch(txt) or nil
end)

local isSpectating = false

TargetTab:Toggle("Spectate Target", function(state)
    isSpectating = state
    if isSpectating and selectedTarget and selectedTarget.Character then
        workspace.CurrentCamera.CameraSubject = selectedTarget.Character:FindFirstChild("Humanoid")
    else
        workspace.CurrentCamera.CameraSubject = LocalPlayer.Character:FindFirstChild("Humanoid")
    end
end)

TargetTab:Button("Teleport to Target", function()
    if selectedTarget and selectedTarget.Character and selectedTarget.Character:FindFirstChild("HumanoidRootPart") then
        local offset = selectedTarget.Character.HumanoidRootPart.CFrame.LookVector * -3
        LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(selectedTarget.Character.HumanoidRootPart.Position + offset))
    end
end)

-- Classic Fling
local flingActive, flingWeld, flingSpinConnection, originalCFrame = false, nil, nil, nil

local function getRootPart(character)
    return character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso")
end

local function startFling(targetPlayer)
    if flingActive then return end
    local rootPart, targetRootPart = getRootPart(LocalPlayer.Character), getRootPart(targetPlayer.Character)
    if not rootPart or not targetRootPart then return end
    originalCFrame, flingActive = rootPart.CFrame, true

    flingWeld = Instance.new("WeldConstraint", rootPart)
    flingWeld.Part0, flingWeld.Part1 = rootPart, targetRootPart

    flingSpinConnection = RunService.Heartbeat:Connect(function(dt)
        if not flingActive then return end
        local angle = tick() * 50
        rootPart.CFrame = targetRootPart.CFrame * CFrame.Angles(0, math.rad(angle), 0) * CFrame.new(0, 0, 3)
    end)
end

local function stopFling()
    flingActive = false
    if flingWeld then flingWeld:Destroy() end
    if flingSpinConnection then flingSpinConnection:Disconnect() end
    local rootPart = getRootPart(LocalPlayer.Character)
    if rootPart and originalCFrame then rootPart.CFrame = originalCFrame end
end

TargetTab:Toggle("Fling Target", function(state)
    if state and selectedTarget then startFling(selectedTarget) else stopFling() end
end)

LocalPlayer.CharacterAdded:Connect(function()
    updateCharacter()
    stopFling()
end)

-- MISC TAB
MiscTab:Label("Miscellaneous Features")

-- WalkSpeed
local walkSpeedEnabled, walkSpeedActive = false, false
local walkSpeedValue, walkSpeedKeybind = 16, Enum.KeyCode.C

local function updateWalkSpeed()
    if Humanoid then
        Humanoid.WalkSpeed = (walkSpeedEnabled and walkSpeedActive) and walkSpeedValue or 16
    end
end

MiscTab:Toggle("Enable WalkSpeed", function(state)
    walkSpeedEnabled = state
    updateWalkSpeed()
end)

MiscTab:Slider("WalkSpeed Value", 16, 100, function(value)
    walkSpeedValue = value
    updateWalkSpeed()
end)

MiscTab:Keybind("WalkSpeed Keybind", walkSpeedKeybind, function(key)
    walkSpeedKeybind = key
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == walkSpeedKeybind then
        walkSpeedActive = not walkSpeedActive
        updateWalkSpeed()
    end
end)

-- Infinite Jump
local infiniteJumpEnabled = false
local jumpConnection

MiscTab:Toggle("Infinite Jump", function(state)
    infiniteJumpEnabled = state
    if jumpConnection then jumpConnection:Disconnect() end
    if infiniteJumpEnabled then
        jumpConnection = UserInputService.JumpRequest:Connect(function()
            if infiniteJumpEnabled and Humanoid then
                Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
    end
end)

-- SETTINGS TAB
SettingsTab:Label("Settings")

SettingsTab:Button("Unload GUI", function()
    Library:Unload()
end)

SettingsTab:Button("Refresh GUI", function()
    Library:Unload()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Mapple7777/UI-Librarys/main/UI-1/UI.lua"))()
end)

local toggleKey = Enum.KeyCode.RightShift
SettingsTab:Keybind("Toggle UI Key", toggleKey, function(key)
    toggleKey = key
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == toggleKey then
        Window:Toggle()
    end
end)
